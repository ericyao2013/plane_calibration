//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the plane_calibration package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __plane_calibration__PLANECALIBRATIONCONFIG_H__
#define __plane_calibration__PLANECALIBRATIONCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace plane_calibration
{
  class PlaneCalibrationConfigStatics;
  
  class PlaneCalibrationConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(PlaneCalibrationConfig &config, const PlaneCalibrationConfig &max, const PlaneCalibrationConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const PlaneCalibrationConfig &config1, const PlaneCalibrationConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, PlaneCalibrationConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const PlaneCalibrationConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PlaneCalibrationConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const PlaneCalibrationConfig &config) const = 0;
      virtual void getValue(const PlaneCalibrationConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T PlaneCalibrationConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (PlaneCalibrationConfig::* field);

      virtual void clamp(PlaneCalibrationConfig &config, const PlaneCalibrationConfig &max, const PlaneCalibrationConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const PlaneCalibrationConfig &config1, const PlaneCalibrationConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, PlaneCalibrationConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const PlaneCalibrationConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PlaneCalibrationConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const PlaneCalibrationConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const PlaneCalibrationConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, PlaneCalibrationConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, PlaneCalibrationConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<PlaneCalibrationConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(PlaneCalibrationConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("enable"==(*_i)->name){enable = boost::any_cast<bool>(val);}
        if("input_max_noise"==(*_i)->name){input_max_noise = boost::any_cast<double>(val);}
        if("input_threshold_from_ground"==(*_i)->name){input_threshold_from_ground = boost::any_cast<double>(val);}
        if("input_max_nan_ratio"==(*_i)->name){input_max_nan_ratio = boost::any_cast<double>(val);}
        if("input_max_zero_ratio"==(*_i)->name){input_max_zero_ratio = boost::any_cast<double>(val);}
        if("input_min_data_ratio"==(*_i)->name){input_min_data_ratio = boost::any_cast<double>(val);}
        if("max_deviation_degrees"==(*_i)->name){max_deviation_degrees = boost::any_cast<double>(val);}
        if("iterations"==(*_i)->name){iterations = boost::any_cast<int>(val);}
        if("precompute_planes"==(*_i)->name){precompute_planes = boost::any_cast<bool>(val);}
        if("precomputed_plane_pairs_count"==(*_i)->name){precomputed_plane_pairs_count = boost::any_cast<int>(val);}
        if("plane_max_too_low_ratio"==(*_i)->name){plane_max_too_low_ratio = boost::any_cast<double>(val);}
        if("plane_max_mean"==(*_i)->name){plane_max_mean = boost::any_cast<double>(val);}
        if("debug"==(*_i)->name){debug = boost::any_cast<bool>(val);}
        if("use_manual_ground_transform"==(*_i)->name){use_manual_ground_transform = boost::any_cast<bool>(val);}
        if("always_update"==(*_i)->name){always_update = boost::any_cast<bool>(val);}
        if("x"==(*_i)->name){x = boost::any_cast<double>(val);}
        if("y"==(*_i)->name){y = boost::any_cast<double>(val);}
        if("z"==(*_i)->name){z = boost::any_cast<double>(val);}
        if("px_degree"==(*_i)->name){px_degree = boost::any_cast<double>(val);}
        if("py_degree"==(*_i)->name){py_degree = boost::any_cast<double>(val);}
        if("pz_degree"==(*_i)->name){pz_degree = boost::any_cast<double>(val);}
      }
    }

    bool enable;
double input_max_noise;
double input_threshold_from_ground;
double input_max_nan_ratio;
double input_max_zero_ratio;
double input_min_data_ratio;
double max_deviation_degrees;
int iterations;
bool precompute_planes;
int precomputed_plane_pairs_count;
double plane_max_too_low_ratio;
double plane_max_mean;
bool debug;
bool use_manual_ground_transform;
bool always_update;
double x;
double y;
double z;
double px_degree;
double py_degree;
double pz_degree;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool enable;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double input_max_noise;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double input_threshold_from_ground;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double input_max_nan_ratio;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double input_max_zero_ratio;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double input_min_data_ratio;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_deviation_degrees;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int iterations;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool precompute_planes;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int precomputed_plane_pairs_count;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double plane_max_too_low_ratio;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double plane_max_mean;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool debug;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_manual_ground_transform;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool always_update;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double x;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double y;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double z;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double px_degree;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double py_degree;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double pz_degree;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("PlaneCalibrationConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const PlaneCalibrationConfig &__max__ = __getMax__();
      const PlaneCalibrationConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const PlaneCalibrationConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const PlaneCalibrationConfig &__getDefault__();
    static const PlaneCalibrationConfig &__getMax__();
    static const PlaneCalibrationConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const PlaneCalibrationConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void PlaneCalibrationConfig::ParamDescription<std::string>::clamp(PlaneCalibrationConfig &config, const PlaneCalibrationConfig &max, const PlaneCalibrationConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class PlaneCalibrationConfigStatics
  {
    friend class PlaneCalibrationConfig;
    
    PlaneCalibrationConfigStatics()
    {
PlaneCalibrationConfig::GroupDescription<PlaneCalibrationConfig::DEFAULT, PlaneCalibrationConfig> Default("Default", "", 0, 0, true, &PlaneCalibrationConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("enable", "bool", 0, "Enable flag", "", &PlaneCalibrationConfig::enable)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("enable", "bool", 0, "Enable flag", "", &PlaneCalibrationConfig::enable)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_max_noise = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_max_noise = 0.1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_max_noise = 0.03;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_max_noise", "double", 0, "Max. noise range", "", &PlaneCalibrationConfig::input_max_noise)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_max_noise", "double", 0, "Max. noise range", "", &PlaneCalibrationConfig::input_max_noise)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_threshold_from_ground = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_threshold_from_ground = 0.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_threshold_from_ground = 0.15;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_threshold_from_ground", "double", 0, "Threshold from ground for valid points [temporary]", "", &PlaneCalibrationConfig::input_threshold_from_ground)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_threshold_from_ground", "double", 0, "Threshold from ground for valid points [temporary]", "", &PlaneCalibrationConfig::input_threshold_from_ground)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_max_nan_ratio = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_max_nan_ratio = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_max_nan_ratio = 0.5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_max_nan_ratio", "double", 0, "Max. ratio of nans to consider valid input data", "", &PlaneCalibrationConfig::input_max_nan_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_max_nan_ratio", "double", 0, "Max. ratio of nans to consider valid input data", "", &PlaneCalibrationConfig::input_max_nan_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_max_zero_ratio = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_max_zero_ratio = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_max_zero_ratio = 0.5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_max_zero_ratio", "double", 0, "Max. ratio of zeros to consider valid input data", "", &PlaneCalibrationConfig::input_max_zero_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_max_zero_ratio", "double", 0, "Max. ratio of zeros to consider valid input data", "", &PlaneCalibrationConfig::input_max_zero_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.input_min_data_ratio = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.input_min_data_ratio = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.input_min_data_ratio = 0.7;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_min_data_ratio", "double", 0, "Min. ratio of valid overall data to consider valid input data", "", &PlaneCalibrationConfig::input_min_data_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("input_min_data_ratio", "double", 0, "Min. ratio of valid overall data to consider valid input data", "", &PlaneCalibrationConfig::input_min_data_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_deviation_degrees = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_deviation_degrees = 14.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_deviation_degrees = 6.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("max_deviation_degrees", "double", 0, "Max. deviation of the ground plane orientation [degree]", "", &PlaneCalibrationConfig::max_deviation_degrees)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("max_deviation_degrees", "double", 0, "Max. deviation of the ground plane orientation [degree]", "", &PlaneCalibrationConfig::max_deviation_degrees)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.iterations = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.iterations = 20;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.iterations = 4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<int>("iterations", "int", 0, "Iterations to optimize estimation", "", &PlaneCalibrationConfig::iterations)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<int>("iterations", "int", 0, "Iterations to optimize estimation", "", &PlaneCalibrationConfig::iterations)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.precompute_planes = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.precompute_planes = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.precompute_planes = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("precompute_planes", "bool", 0, "Precompute planes for fitting or calculate on the fly", "", &PlaneCalibrationConfig::precompute_planes)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("precompute_planes", "bool", 0, "Precompute planes for fitting or calculate on the fly", "", &PlaneCalibrationConfig::precompute_planes)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.precomputed_plane_pairs_count = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.precomputed_plane_pairs_count = 200;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.precomputed_plane_pairs_count = 40;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<int>("precomputed_plane_pairs_count", "int", 0, "Iterations to optimize estimation", "", &PlaneCalibrationConfig::precomputed_plane_pairs_count)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<int>("precomputed_plane_pairs_count", "int", 0, "Iterations to optimize estimation", "", &PlaneCalibrationConfig::precomputed_plane_pairs_count)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.plane_max_too_low_ratio = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.plane_max_too_low_ratio = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.plane_max_too_low_ratio = 0.02;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("plane_max_too_low_ratio", "double", 0, "[Validation] Max. ratio of points lower than given ground plane to consider fitting the data", "", &PlaneCalibrationConfig::plane_max_too_low_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("plane_max_too_low_ratio", "double", 0, "[Validation] Max. ratio of points lower than given ground plane to consider fitting the data", "", &PlaneCalibrationConfig::plane_max_too_low_ratio)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.plane_max_mean = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.plane_max_mean = 0.2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.plane_max_mean = 0.03;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("plane_max_mean", "double", 0, "[Validation] Max. mean data point abs. distance to given ground plane to consider fitting the data", "", &PlaneCalibrationConfig::plane_max_mean)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("plane_max_mean", "double", 0, "[Validation] Max. mean data point abs. distance to given ground plane to consider fitting the data", "", &PlaneCalibrationConfig::plane_max_mean)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.debug = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.debug = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.debug = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("debug", "bool", 0, "Show debug things, e.g. tf transforms", "", &PlaneCalibrationConfig::debug)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("debug", "bool", 0, "Show debug things, e.g. tf transforms", "", &PlaneCalibrationConfig::debug)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_manual_ground_transform = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_manual_ground_transform = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_manual_ground_transform = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("use_manual_ground_transform", "bool", 0, "Use the settings below for the ground plane transformation", "", &PlaneCalibrationConfig::use_manual_ground_transform)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("use_manual_ground_transform", "bool", 0, "Use the settings below for the ground plane transformation", "", &PlaneCalibrationConfig::use_manual_ground_transform)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.always_update = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.always_update = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.always_update = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("always_update", "bool", 0, "Update calibration even if old calibration looks fine", "", &PlaneCalibrationConfig::always_update)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<bool>("always_update", "bool", 0, "Update calibration even if old calibration looks fine", "", &PlaneCalibrationConfig::always_update)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.x = -2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.x = 2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.x = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("x", "double", 0, "x offset", "", &PlaneCalibrationConfig::x)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("x", "double", 0, "x offset", "", &PlaneCalibrationConfig::x)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.y = -2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.y = 2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.y = 0.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("y", "double", 0, "y offset", "", &PlaneCalibrationConfig::y)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("y", "double", 0, "y offset", "", &PlaneCalibrationConfig::y)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.z = -2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.z = 2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.z = 1.6;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("z", "double", 0, "z offset", "", &PlaneCalibrationConfig::z)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("z", "double", 0, "z offset", "", &PlaneCalibrationConfig::z)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.px_degree = -180.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.px_degree = 180.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.px_degree = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("px_degree", "double", 0, "px offset", "", &PlaneCalibrationConfig::px_degree)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("px_degree", "double", 0, "px offset", "", &PlaneCalibrationConfig::px_degree)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.py_degree = -180.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.py_degree = 180.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.py_degree = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("py_degree", "double", 0, "py offset", "", &PlaneCalibrationConfig::py_degree)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("py_degree", "double", 0, "py offset", "", &PlaneCalibrationConfig::py_degree)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pz_degree = -180.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pz_degree = 180.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pz_degree = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("pz_degree", "double", 0, "pz offset", "", &PlaneCalibrationConfig::pz_degree)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(PlaneCalibrationConfig::AbstractParamDescriptionConstPtr(new PlaneCalibrationConfig::ParamDescription<double>("pz_degree", "double", 0, "pz offset", "", &PlaneCalibrationConfig::pz_degree)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(PlaneCalibrationConfig::AbstractGroupDescriptionConstPtr(new PlaneCalibrationConfig::GroupDescription<PlaneCalibrationConfig::DEFAULT, PlaneCalibrationConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<PlaneCalibrationConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<PlaneCalibrationConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<PlaneCalibrationConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    PlaneCalibrationConfig __max__;
    PlaneCalibrationConfig __min__;
    PlaneCalibrationConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const PlaneCalibrationConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static PlaneCalibrationConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &PlaneCalibrationConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const PlaneCalibrationConfig &PlaneCalibrationConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const PlaneCalibrationConfig &PlaneCalibrationConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const PlaneCalibrationConfig &PlaneCalibrationConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<PlaneCalibrationConfig::AbstractParamDescriptionConstPtr> &PlaneCalibrationConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<PlaneCalibrationConfig::AbstractGroupDescriptionConstPtr> &PlaneCalibrationConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const PlaneCalibrationConfigStatics *PlaneCalibrationConfig::__get_statics__()
  {
    const static PlaneCalibrationConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = PlaneCalibrationConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __PLANECALIBRATIONRECONFIGURATOR_H__
